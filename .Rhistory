ggplot(aes(x = Variable1, y = Variable2, fill = Correlation)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlazione") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Matrice di correlazione")
#| eval: true
#| echo: true
#| code-line-numbers: 1-8|10-18
heartdisease <- MLDataR::heartdisease %>%
dplyr::mutate(
HeartDisease = as.factor(HeartDisease),
Sex = as.factor(Sex),
RestingECG = as.factor(RestingECG),
Angina = as.factor(Angina),
HeartPeakReading = as.factor(HeartPeakReading)
)
# creo test dataset e train dataset
train_index <- caret::createDataPartition(
heartdisease$HeartDisease,
p = 0.8,
list = FALSE,
times = 1
)
train <- heartdisease[train_index, ]
test <- heartdisease[-train_index, ]
#| eval: true
#| echo: true
fit <- rpart::rpart(HeartDisease ~ .,
method = "class",
data = train,
control = rpart::rpart.control(
cp = 0.01
)
)
#| eval: true
#| echo: false
#| include: true
#| message: false
#| warning: false
#| output: false
cp_obj <- rpart::printcp(fit)
#| eval: true
#| echo: false
#| include: true
#| message: false
#| warning: false
cp_obj %>%
as.data.frame() %>%
mutate_if(is.numeric, ~round(., 4)) %>%
DT::datatable(
options = list(
dom = 't'
)
)
# | fig-align: center
# | fig-width: 6
# | fig-height: 4
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: true
rpart::plotcp(fit)
#| eval: true
#| echo: true
#| include: true
fit_prune <- rpart::rpart(HeartDisease ~ .,
data = train, control = rpart::rpart.control(
minsplit = 100,
cp = 0.012195
)
)
# | fig-align: center
# | fig-width: 6
# | fig-height: 4
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
rpart.plot::rpart.plot(fit_prune,  type = 4, extra = 104, under = TRUE, fallen.leaves = TRUE)
#| eval: true
#| echo: true
#| include: true
prediction_test_cart <- predict(fit_prune, newdata = test, type = "class")
confusionMatrix(prediction_test_cart, test$HeartDisease)
accuracy_test_cart <- mean(test$HeartDisease == prediction_test_cart)
#| eval: true
#| echo: true
#| include: true
prediction_train_cart <- predict(fit_prune, type = "class")
confusionMatrix(prediction_train_cart, train$HeartDisease)
accuracy_train_cart <- mean(train$HeartDisease == prediction_train_cart)
# | fig-align: center
# | fig-width: 6
# | fig-height: 4
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
# Variable importance
var_imp <- fit_prune$variable.importance
var_imp <- tibble::tibble(
Feature = names(var_imp),
Importance = var_imp) %>%
dplyr::arrange(desc(Importance))
ggplot(var_imp, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "lightblue") +
coord_flip() +
labs(title = "Variable Importance", x = "Features", y = "Importance") +
theme_minimal()
# | fig-align: center
# | fig-width: 6
# | fig-height: 4
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
# Additional plots for better understanding
# Plotting ROC Curve for the test set
# Calculate ROC curve for the test set
prob_test <- predict(fit_prune, newdata = test, type = "prob")[,2]
roc_test <- roc(test$HeartDisease, prob_test, levels = rev(levels(test$HeartDisease)))
# Calculate ROC curve for the training set
prob_train <- predict(fit_prune, type = "prob")[,2]
roc_train <- roc(train$HeartDisease, prob_train, levels = rev(levels(train$HeartDisease)))
# Create a data frame for ggplot
roc_data <- data.frame(
FPR = c(roc_train$specificities, roc_test$specificities),
TPR = c(roc_train$sensitivities, roc_test$sensitivities),
Set = c(rep("Training Set", length(roc_train$specificities)), rep("Test Set", length(roc_test$specificities)))
)
# Plot the ROC curve using ggplot
ggplot(roc_data, aes(x = 1 - FPR, y = TPR, color = Set)) +
geom_line(size = 1) +
geom_abline(linetype = "dashed", color = "gray") +
labs(
title = "ROC Curve for Training and Test Sets",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_blank()
) +
scale_color_manual(values = c("Training Set" = "lightblue", "Test Set" = "darkblue"))
# Calculate AUC for both training and test sets
auc_train <- auc(roc_train)
auc_test <- auc(roc_test)
# auc_train
# auc_test
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| include: true
#| output: false
my_mtry <- randomForest::tuneRF(
x = train %>%
dplyr::select(-HeartDisease),
y = train$HeartDisease,
ntreeTry = 300,
stepFactor = 1.5,
improve = 0.001)
my_mtry
best_mtry <- my_mtry[which.min(my_mtry[,2]),1]
#| eval: true
#| echo: true
#| include: true
rf_best_mtry <- randomForest(HeartDisease ~ .,
data = train,
mtry = best_mtry,
ntree = 300,
importance = TRUE)
print(rf_best_mtry)
#| eval: true
#| echo: true
#| include: true
prediction_test_rf <- predict(rf_best_mtry, newdata = test, type = "class")
confusionMatrix(prediction_test_rf, test$HeartDisease)
accuracy_test_rf <- mean(test$HeartDisease == prediction_test_rf)
#| eval: true
#| echo: true
#| include: true
rf_best_mtry <- randomForest(HeartDisease ~ .,
data = train,
mtry = best_mtry,
ntree = 500,
importance = TRUE)
print(rf_best_mtry)
#| eval: true
#| echo: true
#| include: true
prediction_test_rf <- predict(rf_best_mtry, newdata = test, type = "class")
confusionMatrix(prediction_test_rf, test$HeartDisease)
accuracy_test_rf <- mean(test$HeartDisease == prediction_test_rf)
#| eval: true
#| echo: true
#| include: true
rf_best_mtry <- randomForest(HeartDisease ~ .,
data = train,
mtry = best_mtry,
ntree = 200,
importance = TRUE)
print(rf_best_mtry)
#| eval: true
#| echo: true
#| include: true
prediction_test_rf <- predict(rf_best_mtry, newdata = test, type = "class")
confusionMatrix(prediction_test_rf, test$HeartDisease)
accuracy_test_rf <- mean(test$HeartDisease == prediction_test_rf)
best_mtry
#| eval: true
#| echo: true
#| include: true
rf_best_mtry <- randomForest(HeartDisease ~ .,
data = train,
mtry = best_mtry,
ntree = 100,
importance = TRUE)
print(rf_best_mtry)
#| eval: true
#| echo: true
#| include: true
prediction_test_rf <- predict(rf_best_mtry, newdata = test, type = "class")
confusionMatrix(prediction_test_rf, test$HeartDisease)
accuracy_test_rf <- mean(test$HeartDisease == prediction_test_rf)
rf_best_mtry
rf_best_mtry <- randomForest(HeartDisease ~ .,
data = train,
mtry = best_mtry,
ntree = 250,
importance = TRUE)
#| eval: true
#| echo: true
#| include: true
prediction_test_rf <- predict(rf_best_mtry, newdata = test, type = "class")
accuracy_test_rf <- mean(test$HeartDisease == prediction_test_rf)
accuracy_test_rf
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| include: true
#| output: false
set.seed(2024)
my_mtry <- randomForest::tuneRF(
x = train %>%
dplyr::select(-HeartDisease),
y = train$HeartDisease,
ntreeTry = 300,
stepFactor = 1.5,
improve = 0.001)
#| eval: true
#| echo: true
library(MLDataR)
library(dplyr)
library(tidyr)
library(tidymodels)
library(data.table)
library(ConfusionTableR)
library(OddsPlotty)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(pROC)
library(gbm3)
set.seed(2021)
#| eval: true
#| echo: true
#| results: markup
heartdisease %>%
count(HeartDisease) %>%
mutate(percentage = paste0(round(n / sum(n) * 100, 2), "%")) %>%
DT::datatable(
options = list(
dom = 't'
)
)
# | fig-align: center
# | fig-width: 6
# | fig-height: 12
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
# distribuzione età
ggplot(heartdisease, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Distribuzione dell'età", x = "Età", y = "Frequenza")
# | fig-align: center
# | fig-width: 6
# | fig-height: 12
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
# distribuzione colesterolo
ggplot(heartdisease, aes(x = Sex)) +
geom_histogram(stat = "count", fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Distribuzione per genere", x = "Genere", y = "Frequenza")
# | fig-align: center
# | fig-width: 6
# | fig-height: 12
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
# analisi di correlazione
heartdisease %>%
select_if(is.numeric) %>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = "Variable1") %>%
gather(key = "Variable2", value = "Correlation", -Variable1) %>%
ggplot(aes(x = Variable1, y = Variable2, fill = Correlation)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlazione") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Matrice di correlazione")
#| eval: true
#| echo: true
#| code-line-numbers: 1-8|10-18
heartdisease <- MLDataR::heartdisease %>%
dplyr::mutate(
HeartDisease = as.factor(HeartDisease),
Sex = as.factor(Sex),
RestingECG = as.factor(RestingECG),
Angina = as.factor(Angina),
HeartPeakReading = as.factor(HeartPeakReading)
)
# creo test dataset e train dataset
train_index <- caret::createDataPartition(
heartdisease$HeartDisease,
p = 0.8,
list = FALSE,
times = 1
)
train <- heartdisease[train_index, ]
test <- heartdisease[-train_index, ]
#| eval: true
#| echo: true
fit <- rpart::rpart(HeartDisease ~ .,
method = "class",
data = train,
control = rpart::rpart.control(
cp = 0.01
)
)
#| eval: true
#| echo: false
#| include: true
#| message: false
#| warning: false
#| output: false
cp_obj <- rpart::printcp(fit)
#| eval: true
#| echo: false
#| include: true
#| message: false
#| warning: false
cp_obj %>%
as.data.frame() %>%
mutate_if(is.numeric, ~round(., 4)) %>%
DT::datatable(
options = list(
dom = 't'
)
)
# | fig-align: center
# | fig-width: 6
# | fig-height: 4
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: true
rpart::plotcp(fit)
#| eval: true
#| echo: true
#| include: true
fit_prune <- rpart::rpart(HeartDisease ~ .,
data = train, control = rpart::rpart.control(
minsplit = 100,
cp = 0.012195
)
)
# | fig-align: center
# | fig-width: 6
# | fig-height: 4
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
rpart.plot::rpart.plot(fit_prune,  type = 4, extra = 104, under = TRUE, fallen.leaves = TRUE)
#| eval: true
#| echo: true
#| include: true
prediction_test_cart <- predict(fit_prune, newdata = test, type = "class")
confusionMatrix(prediction_test_cart, test$HeartDisease)
accuracy_test_cart <- mean(test$HeartDisease == prediction_test_cart)
#| eval: true
#| echo: true
#| include: true
prediction_train_cart <- predict(fit_prune, type = "class")
confusionMatrix(prediction_train_cart, train$HeartDisease)
accuracy_train_cart <- mean(train$HeartDisease == prediction_train_cart)
# | fig-align: center
# | fig-width: 6
# | fig-height: 4
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
# Variable importance
var_imp <- fit_prune$variable.importance
var_imp <- tibble::tibble(
Feature = names(var_imp),
Importance = var_imp) %>%
dplyr::arrange(desc(Importance))
ggplot(var_imp, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "lightblue") +
coord_flip() +
labs(title = "Variable Importance", x = "Features", y = "Importance") +
theme_minimal()
# | fig-align: center
# | fig-width: 6
# | fig-height: 4
# | fig-pos: ht
# | fig-cap: "The Sampling Distribution."
# | fig-cap-location: bottom
# | label: fig-sampling
# | echo: false
# Additional plots for better understanding
# Plotting ROC Curve for the test set
# Calculate ROC curve for the test set
prob_test <- predict(fit_prune, newdata = test, type = "prob")[,2]
roc_test <- roc(test$HeartDisease, prob_test, levels = rev(levels(test$HeartDisease)))
# Calculate ROC curve for the training set
prob_train <- predict(fit_prune, type = "prob")[,2]
roc_train <- roc(train$HeartDisease, prob_train, levels = rev(levels(train$HeartDisease)))
# Create a data frame for ggplot
roc_data <- data.frame(
FPR = c(roc_train$specificities, roc_test$specificities),
TPR = c(roc_train$sensitivities, roc_test$sensitivities),
Set = c(rep("Training Set", length(roc_train$specificities)), rep("Test Set", length(roc_test$specificities)))
)
# Plot the ROC curve using ggplot
ggplot(roc_data, aes(x = 1 - FPR, y = TPR, color = Set)) +
geom_line(size = 1) +
geom_abline(linetype = "dashed", color = "gray") +
labs(
title = "ROC Curve for Training and Test Sets",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_blank()
) +
scale_color_manual(values = c("Training Set" = "lightblue", "Test Set" = "darkblue"))
# Calculate AUC for both training and test sets
auc_train <- auc(roc_train)
auc_test <- auc(roc_test)
# auc_train
# auc_test
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| include: true
#| output: false
set.seed(2024)
my_mtry <- randomForest::tuneRF(
x = train %>%
dplyr::select(-HeartDisease),
y = train$HeartDisease,
ntreeTry = 300,
stepFactor = 1.5,
improve = 0.001)
my_mtry
best_mtry <- my_mtry[which.min(my_mtry[,2]),1]
#| eval: true
#| echo: true
#| include: true
rf_best_mtry <- randomForest(HeartDisease ~ .,
data = train,
mtry = best_mtry,
ntree = 250,
importance = TRUE)
print(rf_best_mtry)
#| eval: true
#| echo: true
#| include: true
prediction_test_rf <- predict(rf_best_mtry, newdata = test, type = "class")
confusionMatrix(prediction_test_rf, test$HeartDisease)
accuracy_test_rf <- mean(test$HeartDisease == prediction_test_rf)
accuracy_test_rf
